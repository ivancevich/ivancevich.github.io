<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JC Ivancevich</title>
    <atom:link href="http://ivancevich.me/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://ivancevich.me</link>
    <description>Futuristic Web and Mobile Development Blog</description>
    <pubDate>Tue, 14 Jul 2015 21:00:00 -0300</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>More than Server-Side Rendering</title>
      <link>http://ivancevich.me/articles/more-than-server-side-rendering/</link>
      <pubDate>Tue, 14 Jul 2015 21:00:00 -0300</pubDate>
      <guid isPermaLink="true">http://ivancevich.me/articles/more-than-server-side-rendering/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;strong&gt;Server-Side rendering&lt;/strong&gt; &lt;em&gt;(SSR)&lt;/em&gt; in the world of &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt; frameworks is being a trendy topic these days. I think it’s been thanks to &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, which has &lt;em&gt;SSR&lt;/em&gt; support out-of-the-box and makes it very easy, because of the &lt;a href=&quot;http://tonyfreed.com/blog/what_is_virtual_dom&quot;&gt;Virtual-DOM&lt;/a&gt;. Also, the new version of &lt;a href=&quot;http://emberjs.com/blog/2015/01/08/inside-fastboot-faking-the-dom-in-node.html&quot;&gt;Ember&lt;/a&gt; is going to support &lt;em&gt;SSR&lt;/em&gt; and even &lt;a href=&quot;https://www.reddit.com/r/angularjs/comments/2zowc4/angular_2_supports_serverside_rendering_and/&quot;&gt;Angular 2&lt;/a&gt; will have it (hopefully).&lt;/p&gt;
&lt;h2 id=&quot;but-is-it-enough-is-it-only-about-seo-https-en-wikipedia-org-wiki-search_engine_optimization-&quot;&gt;But, is it enough? Is it only about &lt;a href=&quot;https://en.wikipedia.org/wiki/Search_engine_optimization&quot;&gt;SEO&lt;/a&gt;?&lt;/h2&gt;
&lt;p&gt;I think &lt;strong&gt;rendering the first request on the server and then turning into a regular SPA&lt;/strong&gt; is great. &lt;strong&gt;It helps for SEO&lt;/strong&gt;: the first download has actually data and not only useless templates. &lt;strong&gt;It speeds up the perceived performance&lt;/strong&gt;: the user is able to see the content while the scripts, styles and templates are being downloaded in the background. And may be a few other things.&lt;/p&gt;
&lt;h2 id=&quot;so-there-s-no-reason-not-to-do-ssr-but-we-can-do-better-&quot;&gt;So, there’s no reason not to do SSR. But, &lt;strong&gt;we can do better&lt;/strong&gt;.&lt;/h2&gt;
&lt;p&gt;Let me ask a few more questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What happens if &lt;strong&gt;the scripts were not completely downloaded when the user tries to interact&lt;/strong&gt; with your shinny server-side rendered page?&lt;/li&gt;
&lt;li&gt;Ok, they are downloaded, but if &lt;strong&gt;they explode&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;And if the user is a security obsessed person and has &lt;strong&gt;JS disabled&lt;/strong&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, there’s not much we can do with frameworks like the mentioned above &lt;em&gt;(I like to call them “&lt;strong&gt;mainstream frameworks&lt;/strong&gt;“)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But, in fact, there’s something we can do: &lt;strong&gt;regular web apps&lt;/strong&gt; (YES! the ones with redirects and flash messages).&lt;/p&gt;
&lt;h2 id=&quot;are-you-saying-that-we-should-go-back-to-the-90s-&quot;&gt;Are you saying that we should go back to the ‘90s?&lt;/h2&gt;
&lt;p&gt;Not really, but we can &lt;strong&gt;build on top of that&lt;/strong&gt;. We can add &lt;strong&gt;progressive enhancements&lt;/strong&gt; features on top of regular web apps. And guess what? There’s a framework that does most of the work for you: &lt;a href=&quot;http://taunus.io/&quot;&gt;Taunus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Taunus&lt;/strong&gt; allows &lt;em&gt;SSR&lt;/em&gt; plus a couple of interesting features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Works with both &lt;a href=&quot;https://github.com/taunus/taunus-express&quot;&gt;Express.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/taunus/taunus-hapi&quot;&gt;Hapi.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lets you use the templating language of your choice&lt;/li&gt;
&lt;li&gt;Makes it easy to build apps that don’t depend &lt;em&gt;(100%)&lt;/em&gt; on client-side JavaScript&lt;/li&gt;
&lt;li&gt;Adding real-time is a cinch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s deep dive into &lt;strong&gt;Taunus greatest features&lt;/strong&gt;. To do so, we’re going to explore some of the &lt;a href=&quot;https://github.com/taunus/taunus-todomvc&quot;&gt;Taunus TodoMVC&lt;/a&gt;‘s code.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;building-spas-that-don-t-depend-on-client-side-javascript&quot;&gt;Building SPAs that don’t depend on client-side JavaScript&lt;/h3&gt;
&lt;p&gt;Ok, let’s forget about client-side JavaScript for a bit, and go back to the ‘90s. How would you build a web app back then?&lt;/p&gt;
&lt;p&gt;Easy peasy, you’d have a server-side powered app with some of these characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Responses will be &lt;strong&gt;HTML instead of JSON&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You’d use the &lt;code&gt;GET&lt;/code&gt; method to retrieve a page and the &lt;code&gt;POST&lt;/code&gt; method to submit a form. No &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After form sumission, you’d respond with &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_302&quot;&gt;302&lt;/a&gt; to redirect&lt;/strong&gt; the user to a different page.&lt;/li&gt;
&lt;li&gt;And probably, &lt;strong&gt;flash messages&lt;/strong&gt; will be used to let the user know about fields that were filled wrongly, among other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;a-get-request-in-depth&quot;&gt;A &lt;code&gt;GET&lt;/code&gt; request in depth&lt;/h4&gt;
&lt;p&gt;Here’s part of a template that would be rendered on the server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;filters&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; {{#&lt;span class=&quot;attribute&quot;&gt;all&lt;/span&gt;}}&lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;selected&quot;&lt;/span&gt;&lt;span class=&quot;value&quot;&gt;{{&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;all&lt;/span&gt;}} &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;All&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; {{#&lt;span class=&quot;attribute&quot;&gt;active&lt;/span&gt;}}&lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;selected&quot;&lt;/span&gt;&lt;span class=&quot;value&quot;&gt;{{&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;active&lt;/span&gt;}} &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/active&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Active&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; {{#&lt;span class=&quot;attribute&quot;&gt;completed&lt;/span&gt;}}&lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;selected&quot;&lt;/span&gt;&lt;span class=&quot;value&quot;&gt;{{&lt;/span&gt;/&lt;span class=&quot;attribute&quot;&gt;completed&lt;/span&gt;}} &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/completed&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Completed&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;href&lt;/code&gt; attribute will be in charge of navigating to different pages. Nothing new, ha? That’s exactly how a &lt;em&gt;non-SPA&lt;/em&gt; web application would work.&lt;/p&gt;
&lt;p&gt;In the server, you’d have some router that takes care of these routes. Here’s how they look in Taunus:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// app.js&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;)();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; taunus = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'taunus'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; taunusExpress = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'taunus-express'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = {
  &lt;span class=&quot;comment&quot;&gt;// templates must be pre-compiled&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// into `.bin/views/` in this case.&lt;/span&gt;
  layout: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./.bin/views/layout'&lt;/span&gt;),
  routes: [
    { route: &lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, action: &lt;span class=&quot;string&quot;&gt;'todos/index'&lt;/span&gt; },
    { route: &lt;span class=&quot;string&quot;&gt;'/active'&lt;/span&gt;, action: &lt;span class=&quot;string&quot;&gt;'todos/index'&lt;/span&gt; },
    { route: &lt;span class=&quot;string&quot;&gt;'/completed'&lt;/span&gt;, action: &lt;span class=&quot;string&quot;&gt;'todos/index'&lt;/span&gt; }
  ]
};

taunusExpress(taunus, app, options);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;action&lt;/code&gt; for a &lt;code&gt;route&lt;/code&gt; is just the path to the controller that’s going to handle that route. In this case, all of the routes are using the same controller, which will be located in &lt;code&gt;controllers/todos/index.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This controller is the responsible for providing the data with which the template will be rendered. Let’s take a look at a simplified version of it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; todosService = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./todosService'&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getTodosController&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res, next)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currentPath = req.route.path.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);

  todosService.getAll(getAllHandler);

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAllHandler&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(err, todos)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err); }

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; viewModel = {
      model: {
        all: currentPath === &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;,
        active: currentPath === &lt;span class=&quot;string&quot;&gt;'active'&lt;/span&gt;,
        completed: currentPath === &lt;span class=&quot;string&quot;&gt;'completed'&lt;/span&gt;,
        todos: todos
      }
    };

    res.viewModel = viewModel;

    next();
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how we put the data to render the template into the &lt;code&gt;viewModel&lt;/code&gt; property of the response object. You may be wondering where is the template this controller should render. And also, what happens when &lt;code&gt;next()&lt;/code&gt; is executed.&lt;/p&gt;
&lt;p&gt;Remember the &lt;code&gt;action&lt;/code&gt; for this route was &lt;code&gt;todos/index&lt;/code&gt;?
Well, the template will be placed in &lt;code&gt;views/todos/index.html&lt;/code&gt; then. So, when &lt;code&gt;next()&lt;/code&gt; is called, the template is rendered with the data in &lt;code&gt;res.viewModel&lt;/code&gt; and the user gets the nice looking HTML page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the template is inserted into the layout template (&lt;code&gt;views/layout.html&lt;/code&gt;) when rendered. This is how the layout template should look:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Taunus • TodoMVC&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/css/styles.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;{{{ partial }}}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;a-post-request-in-depth&quot;&gt;A &lt;code&gt;POST&lt;/code&gt; request in depth&lt;/h4&gt;
&lt;p&gt;Here’s another template. Also being rendered on the server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/form/todo&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;new-todo&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;What needs to be done?&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;autofocus&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;action&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt; attributes of the &lt;code&gt;form&lt;/code&gt;. That’s all we’d need to do in order to create a new TODO. Again, no client-side JS here!&lt;/p&gt;
&lt;p&gt;So, what’s going to happen when the user submits the form? The browser is going to fire a &lt;code&gt;POST&lt;/code&gt; request, and we’ll need an endpoint (&lt;code&gt;POST /form/todo&lt;/code&gt;) to be able to handle it.&lt;/p&gt;
&lt;p&gt;Somewhere in our code we need to create an Express endpoint, more or less like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'url'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;)();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; taunus = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'taunus'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; todosService = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'./todosService'&lt;/span&gt;);

app.post(&lt;span class=&quot;string&quot;&gt;'/form/todo'&lt;/span&gt;, createTodo);

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createTodo&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(req, res, next)&lt;/span&gt; &lt;/span&gt;{
  todosService.add(req.body, addHandler);

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addHandler&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(err, todo)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; next(err); }

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; referer = url.parse(req.headers.referer).path;
    taunus.redirect(req, res, referer);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: don’t forget to add the &lt;code&gt;body-parser&lt;/code&gt; Express middleware to be able to access the &lt;code&gt;req.body&lt;/code&gt; property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What the endpoint above does is super simple. It just receives the new TODO in the request body, and adds it using the &lt;code&gt;todosService&lt;/code&gt;. Once this is done, it redirects back to the referer path using &lt;code&gt;taunus.redirect&lt;/code&gt;. So, a new &lt;code&gt;GET&lt;/code&gt; request will be fired, and the page is re-rendered.&lt;/p&gt;
&lt;p&gt;Ok. At this point we only have a regular web app, which could be powered by &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt;, &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;, &lt;a href=&quot;http://laravel.com/&quot;&gt;Laravel&lt;/a&gt;, or whatever instead. Now, it’s time to fast-forward to present day and add some client-side JavaScript.&lt;/p&gt;
&lt;h3 id=&quot;-here-s-when-the-taunus-magic-happens-&quot;&gt;&lt;strong&gt;Here’s when the Taunus magic happens!&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Let’s create a file in &lt;code&gt;client/js/main.js&lt;/code&gt; to bootstrap Taunus client-side.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; taunus = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'taunus'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// the wiring file is the result of running `taunus --output`.&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// it just requires all the necessary files for Browserify.&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wiring = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'../../.bin/wiring'&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; main = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;'main'&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];

taunus.mount(main, wiring);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Browerify it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;browserify client/js/main.js -do .bin/public/js/all.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And include it in the HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;// views/layout.html

&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Taunus • TodoMVC&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/css/styles.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;{{{ partial }}}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/js/all.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: remember to serve the files inside &lt;code&gt;.bin/public/&lt;/code&gt;. You may use the &lt;code&gt;serve-static&lt;/code&gt; Express middleware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just by doing so, &lt;strong&gt;we’ve transformed our regular web app into a SPA&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;How? What’s going to happen from now on?&lt;/p&gt;
&lt;p&gt;Once Taunus is mounted on the client:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Navigating&lt;/strong&gt; to routes will use the &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/history&quot;&gt;History API&lt;/a&gt;&lt;/strong&gt;, and data will be retrieved using &lt;strong&gt;AJAX&lt;/strong&gt;. And, because &lt;strong&gt;Taunus&lt;/strong&gt; knows that we just want JSON, it &lt;strong&gt;will respond with JSON&lt;/strong&gt; instead of HTML.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Submitting forms&lt;/strong&gt; will also be done &lt;strong&gt;using AJAX&lt;/strong&gt;. And, on the server, &lt;code&gt;taunus.redirect&lt;/code&gt; will respond with a JSON document (instead of a &lt;code&gt;302&lt;/code&gt;) which will tell the Taunus router it has to navigate to some route.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apart from that, we’ll be able to create client-side controllers for each page. Here it’s a silly example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// client/js/controllers/todos/index.js&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $ = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'dominus'&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(viewModel, container, route)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; btn = $(&lt;span class=&quot;string&quot;&gt;'.btn'&lt;/span&gt;, container);
  btn.on(&lt;span class=&quot;string&quot;&gt;'click'&lt;/span&gt;, onBtnClick);

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onBtnClick&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(event)&lt;/span&gt; &lt;/span&gt;{
    alert(&lt;span class=&quot;string&quot;&gt;'Button clicked!'&lt;/span&gt;);
  });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As well as having controllers for specific parts of a template (think of these as &lt;strong&gt;directives&lt;/strong&gt; or &lt;strong&gt;components&lt;/strong&gt;) using the &lt;a href=&quot;https://github.com/taunus/taunus-actions&quot;&gt;Taunus Actions&lt;/a&gt; plugin.&lt;/p&gt;
&lt;p&gt;Also, &lt;strong&gt;Taunus can handle flash messages and real-times updates&lt;/strong&gt;, among other things. But I’ll let those things for a future blog post, since this one is quite extensive I think.&lt;/p&gt;
&lt;p&gt;See how easy it is to add &lt;strong&gt;progressive enhancements on top of regular web apps&lt;/strong&gt;? It’s all about &lt;strong&gt;&lt;a href=&quot;http://ponyfoo.com/articles/stop-breaking-the-web&quot;&gt;stop breaking the web&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, it’s time for you to try &lt;a href=&quot;http://taunus.io/&quot;&gt;Taunus&lt;/a&gt;. Also, visit the &lt;a href=&quot;http://todomvc.taunus.io/&quot;&gt;Taunus TodoMVC&lt;/a&gt; implementation and turn off JavaScript in your browser to see what happens!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>Ignoring invalid SSL certificates on Cordova for Android and iOS</title>
      <link>http://ivancevich.me/articles/ignoring-invalid-ssl-certificates-on-cordova-android-ios/</link>
      <pubDate>Wed, 09 Jul 2014 21:00:00 -0300</pubDate>
      <guid isPermaLink="true">http://ivancevich.me/articles/ignoring-invalid-ssl-certificates-on-cordova-android-ios/</guid>
      <author></author>
      <description>&lt;p&gt;When developing &lt;strong&gt;mobile apps&lt;/strong&gt;, it’s very common that we have to connect to web services or APIs which may be secure (https) but are still under development, so its &lt;strong&gt;SSL certificate is not valid&lt;/strong&gt; or self-signed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This would happen unless you want to spend a hundred bucks on a wildcard certificate for development environments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For cases like the mentioned above it’s useful to be able to &lt;strong&gt;ignore errors&lt;/strong&gt; generated by invalid certificates, &lt;strong&gt;so we can test the app, install it on any device&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;p&gt;In order to get rid of this problem, the process changes depending on the platform we’re targeting.&lt;/p&gt;
&lt;h2 id=&quot;ios-objective-c-swift-cordova-&quot;&gt;iOS (Objective-C / Swift / Cordova)&lt;/h2&gt;
&lt;p&gt;iOS will &lt;strong&gt;always complain&lt;/strong&gt; about invalid certificates, either in debug or release mode. To avoid this you should place the following code at the end of the &lt;code&gt;AppDelegate.m&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-objective-c&quot;&gt;@implementation NSURLRequest(DataController)
+ (BOOL)allowsAnyHTTPSCertificateForHost:(NSString *)host
{
    return YES;
}
@end
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;For Cordova users this file is placed in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;project/platforms/ios/Project/Classes/AppDelegate.m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thanks to &lt;a href=&quot;http://machadogj.com&quot;&gt;@machadogj&lt;/a&gt; for this one!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;android-cordova-specific-&quot;&gt;Android (Cordova specific)&lt;/h2&gt;
&lt;p&gt;In Android the history is different.
It will &lt;strong&gt;allow&lt;/strong&gt; you to make requests to services with invalid certificates, but only if the app is &lt;strong&gt;compiled in build mode&lt;/strong&gt;.
On the other hand, when you would build the app in &lt;strong&gt;release mode&lt;/strong&gt; &lt;em&gt;(ie: to send the APK to a co-worker or stuff like that)&lt;/em&gt;, the Cordova Web View, which is where the HTML + CSS + JS you wrote runs, &lt;strong&gt;will not allow&lt;/strong&gt; you to make “insecure” requests.
Once again, to avoid this you should modify a platform file. In this case the file will be &lt;code&gt;CordovaWebViewClient.java&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You would need to modify a method in the mentioned filed, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-java&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onReceivedSslError&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WebView view, SslErrorHandler handler, SslError error)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String packageName = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cordova.getActivity().getPackageName();
  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; PackageManager pm = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.cordova.getActivity().getPackageManager();

  ApplicationInfo appInfo;
  &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
    appInfo = pm.getApplicationInfo(packageName, PackageManager.GET_META_DATA);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((appInfo.flags &amp;amp; ApplicationInfo.FLAG_DEBUGGABLE) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) {
      &lt;span class=&quot;comment&quot;&gt;// debug = true&lt;/span&gt;
      handler.proceed();
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;comment&quot;&gt;// debug = false&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;// THIS IS WHAT YOU NEED TO CHANGE:&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;// 1. COMMENT THIS LINE&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;// super.onReceivedSslError(view, handler, error);&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;// 2. ADD THESE TWO LINES&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;// ----&amp;gt;&lt;/span&gt;
      handler.proceed();
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;
      &lt;span class=&quot;comment&quot;&gt;// &amp;lt;----&lt;/span&gt;
    }
  } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (NameNotFoundException e) {
    &lt;span class=&quot;comment&quot;&gt;// When it doubt, lock it out!&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onReceivedSslError(view, handler, error);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;This file is placed in &lt;strong&gt;(Cordova v4 and below)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;project/platforms/android/CordovaLib/src/org/apache/cordova/CordovaWebViewClient.java
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;-update-&quot;&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In newer versions of &lt;strong&gt;Cordova (v5 and later)&lt;/strong&gt; the file is now placed in&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;project/platforms/android/CordovaLib/src/org/apache/cordova/engine/SystemWebViewClient.java
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;That’s all.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing I’d like to point at is that &lt;strong&gt;you should not use these solutions for production apps&lt;/strong&gt;. This is just to test them or share them with co-workers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have any comment &lt;strong&gt;feel free to drop me a line&lt;/strong&gt; through the comments below.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>First blog post</title>
      <link>http://ivancevich.me/articles/first-blog-post/</link>
      <pubDate>Sun, 06 Jul 2014 21:00:00 -0300</pubDate>
      <guid isPermaLink="true">http://ivancevich.me/articles/first-blog-post/</guid>
      <author></author>
      <description>&lt;p&gt;Hi, my name is &lt;strong&gt;JC Ivancevich&lt;/strong&gt;, I’m a software developer who lives in Buenos Aires, Argentina.&lt;/p&gt;
&lt;p&gt;I’m 24 years old and &lt;strong&gt;extremely passionate about programming&lt;/strong&gt; stuff.&lt;/p&gt;
&lt;p&gt;Currently, I’m working for a &lt;strong&gt;great MBaaS company&lt;/strong&gt; called &lt;strong&gt;&lt;a href=&quot;http://www.kidozen.com&quot;&gt;KidoZen&lt;/a&gt;&lt;/strong&gt;, doing a lot of &lt;code&gt;JavaScript&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I plan to post lots of interesting things here, related to &lt;strong&gt;software development&lt;/strong&gt; of course.&lt;/p&gt;
&lt;p&gt;If you want to contact me, you can catch me on &lt;a href=&quot;https://github.com/ivancevich&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ivancevich&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://ar.linkedin.com/in/ivancevich&quot;&gt;LinkedIn&lt;/a&gt; or &lt;a href=&quot;https://plus.google.com/+JuanCarlosIvancevich&quot;&gt;Google+&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hopefully, &lt;strong&gt;this is the beginning of something great&lt;/strong&gt; :)&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>